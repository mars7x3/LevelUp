version: '2.2'

services:
  postgres:
    image: postgres:latest
    env_file:
      - ./app/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db_network

  web:
    build: ./
    command: gunicorn conf.wsgi:application --bind 0.0.0.0:8000
    restart: always
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./app/.env
    depends_on:
      - postgres
    networks:
      - app_network
      - db_network

  nginx:
    build:
      context: .
      dockerfile: ./nginx.Dockerfile
    restart: always
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./persistentdata/certbot/conf:/etc/letsencrypt
      - ./persistentdata/certbot/www:/var/www/certbot
    depends_on:
      - web
    networks:
      - app_network

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./persistentdata/certbot/conf:/etc/letsencrypt
      - ./persistentdata/certbot/www:/var/www/certbot

volumes:
  static_volume:
  media_volume:
  postgres_data:
    driver: local

networks:
  db_network:
  app_network:
